{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","position","prev","props","images","step","frameSize","itemWidth","infinite","setState","prevState","scrolled","length","next","maxScroll","this","animationDuration","className","style","width","overflow","transform","transition","map","image","index","visible","src","alt","visibility","type","onClick","disabled","React","Component","App","onChangeHandler","event","currentTarget","name","value","maxWidth","htmlFor","id","onChange","min","max","Math","floor","defaultValue","checked","marginLeft","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a14a7b3c.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean\n};\n\ntype State = {\n  position: number\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    position: 0,\n  };\n\n  prev = () => {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    this.setState((prevState) => {\n      const scrolled = prevState.position - (step * itemWidth);\n\n      if (scrolled >= 0) {\n        return {\n          position: scrolled,\n        };\n      }\n\n      if (infinite && scrolled < 0) {\n        return {\n          position: (images.length - frameSize) * itemWidth,\n        };\n      }\n\n      return {\n        position: 0,\n      };\n    });\n  };\n\n  next = () => {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    this.setState((prevState) => {\n      const maxScroll = (images.length - frameSize) * itemWidth;\n      const scrolled = prevState.position + (step * itemWidth);\n\n      if (scrolled <= maxScroll) {\n        return {\n          position: scrolled,\n        };\n      }\n\n      if (infinite && scrolled > maxScroll) {\n        return {\n          position: (maxScroll - scrolled) + frameSize * itemWidth,\n        };\n      }\n\n      return {\n        position: maxScroll,\n      };\n    });\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n    const { position } = this.state;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={\n          {\n            width: `${itemWidth * frameSize}px`,\n            overflow: 'hidden',\n          }\n        }\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(-${position}px)`,\n            transition: `transform ${animationDuration}ms linear`,\n          }}\n        >\n          {images.map((image, index) => {\n            const visible = (index + 1) * itemWidth > position\n              && (index + 1) * itemWidth <= position + frameSize * itemWidth;\n\n            return (\n              <li key={image}>\n                <img\n                  src={image}\n                  alt={`${index + 1}`}\n                  width={itemWidth}\n                  style={\n                    {\n                      width: `${itemWidth}px`,\n                      visibility: visible ? 'visible' : 'hidden',\n                      transition: `visibility ${animationDuration}ms linear`,\n                    }\n                  }\n                />\n              </li>\n            );\n          })}\n        </ul>\n        <div className=\"Carousel__button\">\n          <button\n            type=\"button\"\n            className=\"Carousel__button--item\"\n            onClick={this.prev}\n            disabled={!infinite && position <= 0}\n          >\n            &larr;\n          </button>\n          <button\n            type=\"button\"\n            className=\"Carousel__button--item\"\n            onClick={this.next}\n            disabled={\n              !infinite\n              && position >= (images.length - frameSize) * itemWidth\n            }\n            data-cy=\"next\"\n          >\n            &rarr;\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.currentTarget;\n\n    this.setState((state) => (({\n      ...state,\n      [name]: +value,\n    })));\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    const maxWidth = 1300;\n\n    return (\n      <div\n        className=\"App\"\n        style={{ width: `${maxWidth}px` }}\n      >\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {this.state.images.length} images</h1>\n        <fieldset>\n          <label htmlFor=\"itemId\">Item width</label>\n          <input\n            id=\"itemId\"\n            name=\"itemWidth\"\n            type=\"number\"\n            value={itemWidth}\n            onChange={this.onChangeHandler}\n            min={1}\n            max={maxWidth / images.length}\n          />\n\n          <label htmlFor=\"frameId\">Frame size</label>\n          <input\n            id=\"frameId\"\n            name=\"frameSize\"\n            type=\"number\"\n            value={frameSize}\n            onChange={this.onChangeHandler}\n            min={1}\n            max={Math.floor(maxWidth / itemWidth)}\n          />\n          <label htmlFor=\"stepId\">Step</label>\n          <input\n            id=\"stepId\"\n            name=\"step\"\n            type=\"number\"\n            value={step}\n            onChange={this.onChangeHandler}\n            min={1}\n            max={10}\n          />\n          <label htmlFor=\"animationDuration\">Animation duration</label>\n          <input\n            name=\"animationDuration\"\n            type=\"number\"\n            defaultValue={animationDuration}\n            onChange={this.onChangeHandler}\n            step={1000}\n          />\n          <label>\n            Infinite\n            <input\n              name=\"animationDuration\"\n              type=\"checkbox\"\n              onChange={(event) => this.setState({\n                infinite: event.currentTarget.checked,\n              })}\n              checked={infinite}\n              style={{ marginLeft: 10 }}\n            />\n          </label>\n        </fieldset>\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}